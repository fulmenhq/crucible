$schema: https://schemas.fulmenhq.dev/library/foundry/v1.0.0/similarity.schema.json
version: 2025.10.3
notes: |
  Fixture values to be computed by pyfulmen using Rust strsim 0.11.x (canonical)
  with cross-validation against Python rapidfuzz 3.x.

  PLACEHOLDER values below are marked with "# PYFULMEN_COMPUTE" comments.
  These must be replaced with actual computed values before language implementations begin.
test_cases:
  # Levenshtein Distance Test Cases
  - category: levenshtein
    cases:
      - input_a: ""
        input_b: ""
        expected_distance: 0
        expected_score: 1.0
        description: "Empty strings (identity)"
        tags: ["edge_case"]
      - input_a: "hello"
        input_b: "hello"
        expected_distance: 0
        expected_score: 1.0
        description: "Identical strings"
        tags: ["identity"]
      - input_a: "kitten"
        input_b: "sitting"
        expected_distance: 3
        expected_score: 0.5714285714285714
        description: "Classic Levenshtein example"
        tags: ["standard"]
      - input_a: "Hello"
        input_b: "hello"
        expected_distance: 1
        expected_score: 0.8
        description: "Case difference (single substitution)"
        tags: ["case"]
      - input_a: "caf√©"
        input_b: "cafe"
        expected_distance: 1
        expected_score: 0.75
        description: "Accent difference"
        tags: ["unicode", "accent"]
      - input_a: "Helloüî•World"
        input_b: "HelloWorld"
        expected_distance: 1
        expected_score: 0.9090909090909091
        description: "Emoji deletion"
        tags: ["emoji", "unicode"]
      - input_a: "Êó•Êú¨Ë™û"
        input_b: "Êó•Êú¨"
        expected_distance: 1
        expected_score: 0.6666666666666666
        description: "CJK character deletion"
        tags: ["cjk", "unicode"]
  # Damerau-Levenshtein Test Cases
  - category: damerau
    cases:
      - input_a: "abcd"
        input_b: "abdc"
        expected_distance: 1 # PYFULMEN_COMPUTE (transposition)
        expected_score: 0.0 # PYFULMEN_COMPUTE
        description: "Basic transposition (cd -> dc)"
        tags: ["transposition"]
      - input_a: "hello"
        input_b: "ehllo"
        expected_distance: 1 # PYFULMEN_COMPUTE (transposition)
        expected_score: 0.0 # PYFULMEN_COMPUTE
        description: "Transposition at start (he -> eh)"
        tags: ["transposition"]
      - input_a: "algorithm"
        input_b: "lagorithm"
        expected_distance: 2 # PYFULMEN_COMPUTE (al -> la is transposition + deletion)
        expected_score: 0.0 # PYFULMEN_COMPUTE
        description: "Transposition + other edits"
        tags: ["transposition", "combined"]
      - input_a: "abcd"
        input_b: "acbd"
        expected_distance: 2 # PYFULMEN_COMPUTE (non-adjacent, can't use single transposition)
        expected_score: 0.0 # PYFULMEN_COMPUTE
        description: "Non-adjacent swap (requires 2 substitutions)"
        tags: ["transposition", "non_adjacent"]
  # Jaro-Winkler Test Cases
  - category: jaro_winkler
    cases:
      - input_a: "martha"
        input_b: "marhta"
        expected_score: 0.0 # PYFULMEN_COMPUTE
        description: "Classic Jaro-Winkler example"
        tags: ["standard"]
      - input_a: "dixon"
        input_b: "dicksonx"
        expected_score: 0.0 # PYFULMEN_COMPUTE
        description: "Name matching with prefix"
        tags: ["prefix", "names"]
      - input_a: "schema"
        input_b: "schemas"
        expected_score: 0.0 # PYFULMEN_COMPUTE
        description: "Common prefix, different suffix"
        tags: ["prefix", "cli"]
      - input_a: "test"
        input_b: "text"
        expected_score: 0.0 # PYFULMEN_COMPUTE
        description: "Short strings with typo"
        tags: ["typo", "short"]
      - input_a: "hello"
        input_b: "world"
        expected_score: 0.0 # PYFULMEN_COMPUTE
        description: "Completely different strings"
        tags: ["edge_case"]
  # Substring Scoring Test Cases
  - category: substring
    cases:
      - needle: "hello"
        haystack: "hello world"
        expected_score: 0.4545454545454545 # 5 / max(5, 11)
        expected_range:
          start: 0
          end: 5
        description: "Prefix match"
        tags: ["prefix"]
      - needle: "world"
        haystack: "hello world"
        expected_score: 0.4545454545454545 # 5 / max(5, 11)
        expected_range:
          start: 6
          end: 11
        description: "Suffix match"
        tags: ["suffix"]
      - needle: "schemas"
        haystack: "schemas/foundry/patterns.yaml"
        expected_score: 0.2413793103448276 # 7 / max(7, 29)
        expected_range:
          start: 0
          end: 7
        description: "Path component match"
        tags: ["path", "partial"]
      - needle: "foundry"
        haystack: "schemas/foundry/patterns.yaml"
        expected_score: 0.2413793103448276 # 7 / max(7, 29)
        expected_range:
          start: 8
          end: 15
        description: "Middle path component"
        tags: ["path", "middle"]
      - needle: "test"
        haystack: "this is a test case"
        expected_score: 0.2105263157894737 # 4 / max(4, 19)
        expected_range:
          start: 10
          end: 14
        description: "Word in sentence"
        tags: ["sentence"]
      - needle: "xyz"
        haystack: "abcdef"
        expected_score: 0.0
        description: "No common substring"
        tags: ["edge_case", "no_match"]
  # Normalization Preset Test Cases
  - category: normalization_presets
    cases:
      - input: "  Hello  "
        preset: "none"
        expected: "  Hello  "
        description: "No normalization (unchanged)"
        tags: ["none"]
      - input: "  Caf√©-Z√ºrich!  "
        preset: "minimal"
        expected: "Caf√©-Z√ºrich!"
        description: "Minimal: NFC + trim"
        tags: ["minimal", "unicode"]
      - input: "  Caf√©-Z√ºrich!  "
        preset: "default"
        expected: "caf√©-z√ºrich!"
        description: "Default: NFC + casefold + trim"
        tags: ["default", "unicode"]
      - input: "  Caf√©-Z√ºrich!  "
        preset: "aggressive"
        expected: "cafezurich"
        description: "Aggressive: NFKD + casefold + strip accents + remove punctuation + trim"
        tags: ["aggressive", "unicode"]
      - input: "ƒ∞stanbul"
        preset: "default"
        expected: "iÃástanbul"
        description: "Turkish dotted I (Unicode casefold)"
        tags: ["turkish", "locale"]
      - input: "na√Øve"
        preset: "aggressive"
        expected: "naive"
        description: "Accent stripping (√Ø -> i)"
        tags: ["accent", "aggressive"]
      - input: "Hello, World!"
        preset: "aggressive"
        expected: "hello world"
        description: "Punctuation removal"
        tags: ["punctuation", "aggressive"]
  # Suggestion Test Cases
  - category: suggestions
    cases:
      - input: "docscrib"
        candidates: ["docscribe", "crucible-shim", "config-path-api", "foundry"]
        options:
          min_score: 0.6
          max_suggestions: 3
          metric: "levenshtein"
          normalize_preset: "default"
        expected:
          - value: "docscribe"
            score: 0.8888888888888888 # 1 - 1/9
        description: "CLI typo correction"
        tags: ["cli", "typo"]
      - input: "schem"
        candidates: ["schemas", "schema-validation", "config-path-api"]
        options:
          min_score: 0.5
          max_suggestions: 2
          metric: "substring"
          normalize_preset: "default"
        expected:
          - value: "schemas"
            score: 0.7142857142857143 # 5 / max(5, 7)
          - value: "schema-validation"
            score: 0.2941176470588235 # 5 / max(5, 17)
        description: "Partial path matching"
        tags: ["path", "substring"]
      - input: "Caf√©"
        candidates: ["caf√©", "cache", "config"]
        options:
          min_score: 0.6
          max_suggestions: 2
          metric: "levenshtein"
          normalize_preset: "aggressive"
        expected:
          - value: "caf√©"
            score: 1.0 # After aggressive normalization, both become "cafe"
          - value: "cache"
            score: 0.8 # "cafe" vs "cache" = 1 edit
        description: "Normalization impact on suggestions"
        tags: ["normalization", "unicode"]
      - input: "test"
        candidates: ["testing", "tested", "best"]
        options:
          min_score: 0.6
          max_suggestions: 3
          metric: "jaro_winkler"
          normalize_preset: "default"
          prefer_prefix: true
        expected:
          - value: "testing"
            score: 0.0 # PYFULMEN_COMPUTE (Jaro-Winkler with prefix bonus)
          - value: "tested"
            score: 0.0 # PYFULMEN_COMPUTE
        description: "Jaro-Winkler with prefix preference"
        tags: ["jaro_winkler", "prefix"]
